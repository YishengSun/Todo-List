{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","toggleForm","bind","handleChange","handleUpdate","handleToggle","this","setState","e","preventDefault","update","id","target","name","value","toggleCompleted","className","onSubmit","type","onChange","isCompleted","onClick","remove","Component","NewTodoForm","handleAdd","addItem","htmlFor","placeholder","TodoList","todos","item","newItem","uuid","completed","st","filter","todo","updatedTask","updatedTodos","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4595c587.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Todo.css\";\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false,\n      task: this.props.task // 传下来的\n    };\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing });\n  }\n  handleUpdate(e) {\n    e.preventDefault();\n    this.props.update(this.props.id, this.state.task); // can not use key as argument\n    this.toggleForm();\n  }\n  handleChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  handleToggle() {\n    this.props.toggleCompleted(this.props.id);\n  }\n\n  render() {\n    let result;\n    if (this.state.isEditing) {\n      // render different things based on isEditing\n      result = (\n        <div className=\"Todo\">\n          <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n            <input\n              type=\"text\"\n              value={this.state.task}\n              name=\"task\"\n              onChange={this.handleChange}\n            />\n            <button type=\"submit\" >\n              Save\n            </button>\n          </form>\n        </div>\n      );\n    } else {\n      result = (\n        <div className=\"Todo\">\n          <li\n            className={\n              this.props.isCompleted ? \"Todo-task completed\" : \"Todo-task\"\n            }\n            onClick={this.handleToggle}\n          >\n            {this.props.task}\n          </li>\n          <div className=\"Todo-buttons\">\n            <button onClick={this.toggleForm}>\n              <i className=\"fas fa-pen\" />\n            </button>\n            <button onClick={this.props.remove}>\n              <i className=\"fas fa-trash\" />\n            </button>\n          </div>\n        </div>\n      );\n    }\n    return result;\n  }\n}\n\nexport default Todo;\n","import React, { Component } from \"react\";\nimport \"./NewTodoForm.css\";\n\nclass NewTodoForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { task: \"\" };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n  }\n  handleChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  handleAdd(e) {\n    e.preventDefault();\n    this.props.addItem(this.state);\n    this.setState({ task: \"\" });\n  }\n  render() {\n    return (\n      <form className=\"NewTodoForm\" onSubmit={this.handleAdd}>\n        <label htmlFor=\"task\">New Todo</label>\n        <input\n          id=\"task\"\n          name=\"task\"\n          type=\"text\"\n          placeholder=\"New Todo\"\n          value={this.state.task}\n          onChange={this.handleChange}\n        />\n        <button type=\"submit\">Add</button>\n      </form>\n    );\n  }\n}\nexport default NewTodoForm;\n","import React, { Component } from \"react\";\nimport Todo from \"./Todo\";\nimport NewTodoForm from \"./NewTodoForm\";\nimport uuid from \"uuid/v4\";\nimport \"./TodoList.css\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n    this.addItem = this.addItem.bind(this);\n    this.remove = this.remove.bind(this);\n    this.update = this.update.bind(this);\n    this.toggleCompleted = this.toggleCompleted.bind(this);\n  }\n  addItem(item) {\n    const newItem = { ...item, id: uuid(), completed: false };\n    this.setState(st => ({ todos: [...st.todos, newItem] }));\n  }\n  remove(id) {\n    this.setState({ todos: this.state.todos.filter(todo => todo.id !== id) });\n  }\n  update(id, updatedTask) {\n    const updatedTodos = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, task: updatedTask };\n      } else {\n        return todo;\n      }\n    });\n    this.setState({ todos: updatedTodos });\n  }\n  toggleCompleted(id) {\n    const updatedTodos = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      } else {\n        return todo;\n      }\n    });\n    this.setState({ todos: updatedTodos });\n  }\n  render() {\n    const todos = this.state.todos.map(todo => (\n      <Todo\n        task={todo.task}\n        key={todo.id}\n        id={todo.id}\n        remove={() => this.remove(todo.id)}\n        update={this.update}\n        isCompleted={todo.completed}\n        toggleCompleted={this.toggleCompleted}\n      />\n    ));\n    return (\n      <div className=\"TodoList\">\n        <h1>\n          Todo List!<span>A simple react todo list app.</span>\n        </h1>\n\n        <ul>{todos}</ul>\n        <NewTodoForm addItem={this.addItem} />\n      </div>\n    );\n  }\n}\nexport default TodoList;\n","import React from \"react\";\nimport TodoList from \"./TodoList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}